!----------------- Input deck illustrating the Python-Fortran interface ------------------
! To run this input deck as is, first put the input deck, OSIRIS executable, and the
! py-script.py file all in the same directory.  Then execute `python py-script.py`, which
! will create the interp.npy data file.  Next, do `export PYTHONPATH=.` to set the Python
! path to the directory that contains the py-script.py file (current directory).  Finally,
! execute `./osiris-2D.e os-stdin-py-util` to run the simulation, which will use the
! py-script.py and interp.npy files to set various field and particle data.
!-----------------------------------------------------------------------------------------

!--------the node configuration for this simulation--------
node_conf
{
  node_number(1:2) =  1, 1,
  if_periodic(1:2) =  .true., .true.,
}

!----------spatial grid----------
grid
{
  nx_p(1:2) =  32, 32,
  coordinates = "cartesian",
}

!----------time step and global data dump timestep number----------
time_step
{
  dt     =   0.07,
  ndump  =    10,
}

!----------restart information----------
restart
{
  ndump_fac = 0,
  if_restart= .false.,
}

!----------spatial limits of the simulations----------
space
{
  xmin(1:2) =  0.000, 0.000,
  xmax(1:2) =  3.200, 3.200,
  if_move(1:2) = .false., .false.,
}

!----------time limits ----------
time
{
  tmin = 0.0,
  tmax  = 7.0,
}

!----------field solver set up----------
el_mag_fld
{
  ! Set two of the field components with the Python script
  ! Note, you need to set PYTHONPATH in the console to the folder containing py-script.py
  type_init_b(1:3) = "uniform", "python", "uniform",
  type_init_e(1:3) = "python", "uniform", "uniform",
  init_py_mod = "py-script", ! Name of Python file
  init_py_func = "set_fld", ! Name of function in the Python file to call (same for all components)
  ! init_move_window = .false., ! May want to declare this for a moving-window simulation

  ! You can also do this with external fields, as functions of time
  ext_fld = "dynamic",
  type_ext_b(1:3) = "none", "python", "none",
  type_ext_e(1:3) = "python", "none", "none",
  ext_py_mod = "py-script", ! Name of Python file
  ext_py_func = "set_fld_ext", ! Name of function in the Python file to call (same for all components)
}

!----------boundary conditions for em-fields ----------
emf_bound
{
  type(1:2,1) =   "conducting", "conducting",
  type(1:2,2) =   "conducting", "conducting",
}

!----------- electo-magnetic field diagnostics ---------
diag_emf
{
  ndump_fac = 1,
  reports = "e1", "b2", "ext_e1", "ext_b2",
}

!----------number of particle species----------
particles
{
  interpolation = "linear",
  num_species = 1,
}

!----------information for species 1----------
species
{
  num_par_max = 4096,
  rqm=-1.0,
  num_par_x(1:2) = 8, 8,
  init_type = "python",
}

!----------inital proper velocities-----------------
udist {
  use_classical_uadd = .true.,

  ! Set the momenta exactly for each particle
  ! uth_type = "python",
  ! uth_py_mod = "py-script", ! Name of Python file
  ! uth_py_func = "set_uth", ! Name of function in the Python file to call

  ! Set the thermal velocity as a function of space
  use_spatial_uth = .true.,
  ! spatial_uth(1:3) = "0.2*x1+x2", "x1-x2", "0.1",
  uth_py_mod = "py-script", ! Name of Python file
  uth_py_func = "set_uth", ! Name of function in the Python file to call

  ufl_py_mod = "py-script", ! Name of Python file
  ufl_py_func = "set_ufl", ! Name of function in the Python file to call
}

!----------density profile for this species----------
profile
{
  py_mod = "py-script", ! Name of Python file
  py_func = "set_density", ! Name of function in the Python file to call
}

!----------boundary conditions for this species----------
spe_bound
{
  type(1:2,1) =   "specular","specular",
  type(1:2,2) =   "specular","specular",
}

!----------diagnostic for this species----------
diag_species
{
  ndump_fac = 1,
  reports = "charge",
  rep_udist = "uth1", "uth2", "uth3", "ufl1", "ufl2", "ufl3",
  ndump_fac_pha = 1,
  ps_pmin(1:3) = -1, -1, -1,
  ps_pmax(1:3) = 1, 1, 1,
  ps_np(1:3) = 125, 125, 125,
  if_ps_p_auto(1:3) = .true., .true., .true.,
  phasespaces = "p1p2", "p1p3",
}

!----------smoothing for currents----------
smooth
{
  type="5pass",
}

!----------diagnostic for currents----------
diag_current
{
}
