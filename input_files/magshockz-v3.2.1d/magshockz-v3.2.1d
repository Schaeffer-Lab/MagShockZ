!----------------- Input deck illustrating the Python-Fortran interface ------------------
! To run this input deck as is, first put the input deck, OSIRIS executable, and the
! py-script-1d.py file all in the same directory.  Next, do `export PYTHONPATH=.` to set the Python
! path to the directory that contains the py-script-1d.py file (current directory). Finally,
! execute `./osiris-1D.e magshockz-v3.2.1d` to run the simulation, which will use the
! py-script-1d.py and interp.npy files to set various field and particle data.
!-----------------------------------------------------------------------------------------

!----------global simulation parameters----------
simulation 
{
 parallel_io = "mpi",
}

!--------the node configuration for this simulation--------
node_conf 
{
 node_number = 16, ! edit this to the number of nodes you are using
 n_threads=2,
}

!----------spatial grid----------
grid
{
 nx_p = 54092, ! number of cells in x-direction
}

!----------time step and global data dump timestep number----------
time_step
{
  dt     =   0.12863135434807288 sqrt(code_temperature),
  ndump  =   199,
}

!----------restart information----------
restart
{
  ndump_fac = -1,
  ndump_time = 3500, !once/hour
  if_restart = .false.,
  if_remold = .true.,
}

!----------spatial limits of the simulations----------
space
{
  ! This is euclidean distance, not the span in y direction
  ! Start point in 2D plane is specified in py-script-1d
  xmin =  0, ! This should always be == 0
  xmax =  7100,
}

!----------time limits ----------
time
{
  tmin = 0.0,
  tmax  = 10245,
}

!----------field solver set up----------
el_mag_fld
{
  ! Set two of the field components with the Python script
  ! Note, you need to set PYTHONPATH in the console to the folder containing py-script-1d.py
  type_init_b(1:3) = "python", "python", "python",
  type_init_e(1:3) = "python", "python", "python",
  init_py_mod = "py-script-1d", ! Name of Python file
  init_py_func = "set_fld_int", ! Name of function in the Python file to call (same for all components)
  ! init_move_window = .false., ! May want to declare this for a moving-window simulation

  ! You can also do this with external fields, as functions of time
  ext_fld = "static",
  type_ext_b(1:3) = "uniform", "uniform", "uniform",
  ext_b0(1:3) = 0.e+00, 0, 0,
  }

!----------boundary conditions for em-fields ----------
emf_bound
{
  type(1:2,1) =   "open", "open",
}

!----------- electro-magnetic field diagnostics ---------
diag_emf
{
  reports = 
    "b1, savg",
    "b2, savg",
    "b3, savg",
    "e1, savg",
    "e2, savg",
    "e3, savg",
    
  !ndump_fac = 1,                     ! do full grid diagnostics at every 20 timesteps
  ndump_fac_ave = 1,                  ! do average/envelope grid diagnostics at every timestep
  ! ndump_fac_lineout = 1,              ! do lineouts/slices at every timestep
  ndump_fac_ene_int = 1,
  n_ave(1:1) = 4,                   ! average/envelope 8 cells (2x2x2)
  !n_tavg = 5,                         ! average 5 iterations for time averaged diagnostics 
}

!----------information for electrons----------
species
{
 name = "electrons",
 rqm=-1.0,
 num_par_x = 100,
 init_type = "python",
}

!----------inital proper velocities - electrons-----------------
udist
{
 use_spatial_uth = .true.,
 uth_py_mod = "py-script-1d", ! Name of Python file
 uth_py_func = "set_uth_e", ! Name of function in the Python file to call
 
 ! use_spatial_ufl = .true.,
 ufl_py_mod = "py-script-1d", ! Name of Python file
 ufl_py_func = "set_ufl_e", ! Name of function in the Python file to call
}

!----------density profile for electrons----------
profile
{
 py_mod = "py-script-1d", ! Name of Python file
 py_func = "set_density_e", ! Name of function in the Python file to call
}

!----------boundary conditions for electrons----------
spe_bound
{
 type(1:2,1) = "thermal","thermal",
 uth_bnd(1:3,1,1) = 7.6317e-03, 7.6317e-03, 7.6317e-03, 
 uth_bnd(1:3,2,1) = 3.2127e-02, 3.2127e-02, 3.2127e-02, 
}

!----------diagnostic for electrons----------
diag_species
{
 ndump_fac = 1,
 ndump_fac_temp = 1,
 ndump_fac_ene = 1,
 reports = "charge",
 rep_udist = "uth1", "uth2", "ufl1", "ufl2",
 ndump_fac_pha = 1,
 ps_pmin(1:3) = -0.1, -0.1, -0.02,
 ps_pmax(1:3) = 0.1,  0.1,  0.02,
 ps_xmin(1:1) = 0.0,
 ps_xmax(1:1) = 7100,
 ps_np = 4096,
 ps_nx = 4096,
 phasespaces = "p1x1", "p2x1","p3x1",
}

!----------information for channel ions----------
species
{
 name = "channel",
 rqm = 381.0,
 num_par_x = 100,
 init_type = "python",
}

!----------inital proper velocities - channel ions-----------------
udist
{
 use_spatial_uth = .true.,
 uth_py_mod = "py-script-1d", ! Name of Python file
 uth_py_func = "set_uth_channel", ! Name of function in the Python file to call
 
 ! use_spatial_ufl = .true.,
 ufl_py_mod = "py-script-1d", ! Name of Python file
 ufl_py_func = "set_ufl_i", ! Name of function in the Python file to call
}

!----------density profile for channel ions----------
profile
{
 py_mod = "py-script-1d", ! Name of Python file
 py_func = "set_density_channel", ! Name of function in the Python file to call
}

!----------boundary conditions for channel ions----------
spe_bound
{
 type(1:2,1) =   "thermal","thermal",
 uth_bnd(1:3,1,1) = 3.9091e-04, 3.9091e-04, 3.9091e-04, 
 uth_bnd(1:3,2,1) = 7.5175e-04, 7.5175e-04, 7.5175e-04, 
}

!----------diagnostic for channel ions----------
diag_species
{
 ndump_fac = 1,
 ndump_fac_temp = 1,
 ndump_fac_ene = 1,
 reports = "charge",
 rep_udist = "uth1", "uth2", "ufl1", "ufl2",
 ndump_fac_pha = 1,
 ps_pmin(1:3) = -0.05, -0.05, -0.02,
 ps_pmax(1:3) = 0.05,  0.05,  0.02,
 ps_xmin(1:1) = 0.0,
 ps_xmax(1:1) = 7100,
 ps_np = 4096,
 ps_nx = 4096,
 !if_ps_p_auto(1:3) = .true., .true., .true.,
 phasespaces = "p1x1", "p2x1","p3x1",
}
!----------information for sheathe ions----------
species
{
 name = "sheathe",
 rqm = 680.2,
 num_par_x = 100,
 init_type = "python",
}

!----------inital proper velocities - sheathe ions-----------------
udist
{
 use_spatial_uth = .true.,
 uth_py_mod = "py-script-1d", ! Name of Python file
 uth_py_func = "set_uth_sheathe", ! Name of function in the Python file to call
 
 ! use_spatial_ufl = .true.,
 ufl_py_mod = "py-script-1d", ! Name of Python file
 ufl_py_func = "set_ufl_i", ! Name of function in the Python file to call
}

!----------density profile for sheathe ions----------
profile
{
 py_mod = "py-script-1d", ! Name of Python file
 py_func = "set_density_sheathe", ! Name of function in the Python file to call
}

!----------boundary conditions for sheathe ions----------
spe_bound
{
 type(1:2,1) =   "thermal","thermal",
 uth_bnd(1:3,1,1) = 2.9256e-04, 2.9256e-04, 2.9256e-04, 
 uth_bnd(1:3,2,1) = 5.6263e-04, 5.6263e-04, 5.6263e-04, 
}

!----------diagnostic for sheathe ions----------
diag_species
{
 ndump_fac = 1,
 ndump_fac_temp = 1,
 ndump_fac_ene = 1,
 reports = "charge",
 rep_udist = "uth1", "uth2", "ufl1", "ufl2",
 ndump_fac_pha = 1,
 ps_pmin(1:3) = -0.05, -0.05, -0.02,
 ps_pmax(1:3) = 0.05,  0.05,  0.02,
 ps_xmin(1:1) = 0.0,
 ps_xmax(1:1) = 7100,
 ps_np = 4096,
 ps_nx = 4096,
 !if_ps_p_auto(1:3) = .true., .true., .true.,
 phasespaces = "p1x1", "p2x1","p3x1",
}
!----------information for background ions----------
species
{
 name = "background",
 rqm = 725.7,
 num_par_x = 100,
 init_type = "python",
}

!----------inital proper velocities - background ions-----------------
udist
{
 use_spatial_uth = .true.,
 uth_py_mod = "py-script-1d", ! Name of Python file
 uth_py_func = "set_uth_background", ! Name of function in the Python file to call
 
 ! use_spatial_ufl = .true.,
 ufl_py_mod = "py-script-1d", ! Name of Python file
 ufl_py_func = "set_ufl_i", ! Name of function in the Python file to call
}

!----------density profile for background ions----------
profile
{
 py_mod = "py-script-1d", ! Name of Python file
 py_func = "set_density_background", ! Name of function in the Python file to call
}

!----------boundary conditions for background ions----------
spe_bound
{
 type(1:2,1) =   "thermal","thermal",
 uth_bnd(1:3,1,1) = 2.8324e-04, 2.8324e-04, 2.8324e-04, 
 uth_bnd(1:3,2,1) = 5.4470e-04, 5.4470e-04, 5.4470e-04, 
}

!----------diagnostic for background ions----------
diag_species
{
 ndump_fac = 1,
 ndump_fac_temp = 1,
 ndump_fac_ene = 1,
 reports = "charge",
 rep_udist = "uth1", "uth2", "ufl1", "ufl2",
 ndump_fac_pha = 1,
 ps_pmin(1:3) = -0.05, -0.05, -0.02,
 ps_pmax(1:3) = 0.05,  0.05,  0.02,
 ps_xmin(1:1) = 0.0,
 ps_xmax(1:1) = 7100,
 ps_np = 4096,
 ps_nx = 4096,
 !if_ps_p_auto(1:3) = .true., .true., .true.,
 phasespaces = "p1x1", "p2x1","p3x1",
}
!----------information for si ions----------
species
{
 name = "si",
 rqm = 389.9,
 num_par_x = 100,
 init_type = "python",
}

!----------inital proper velocities - si ions-----------------
udist
{
 use_spatial_uth = .true.,
 uth_py_mod = "py-script-1d", ! Name of Python file
 uth_py_func = "set_uth_si", ! Name of function in the Python file to call
 
 ! use_spatial_ufl = .true.,
 ufl_py_mod = "py-script-1d", ! Name of Python file
 ufl_py_func = "set_ufl_i", ! Name of function in the Python file to call
}

!----------density profile for si ions----------
profile
{
 py_mod = "py-script-1d", ! Name of Python file
 py_func = "set_density_si", ! Name of function in the Python file to call
}

!----------boundary conditions for si ions----------
spe_bound
{
 type(1:2,1) =   "thermal","thermal",
 uth_bnd(1:3,1,1) = 3.8642e-04, 3.8642e-04, 3.8642e-04, 
 uth_bnd(1:3,2,1) = 7.4312e-04, 7.4312e-04, 7.4312e-04, 
}

!----------diagnostic for si ions----------
diag_species
{
 ndump_fac = 1,
 ndump_fac_temp = 1,
 ndump_fac_ene = 1,
 reports = "charge",
 rep_udist = "uth1", "uth2", "ufl1", "ufl2",
 ndump_fac_pha = 1,
 ps_pmin(1:3) = -0.05, -0.05, -0.02,
 ps_pmax(1:3) = 0.05,  0.05,  0.02,
 ps_xmin(1:1) = 0.0,
 ps_xmax(1:1) = 7100,
 ps_np = 4096,
 ps_nx = 4096,
 !if_ps_p_auto(1:3) = .true., .true., .true.,
 phasespaces = "p1x1", "p2x1","p3x1",
}
!----------diagnostic for currents----------
diag_current
{
 !ndump_fac = 1,
 !reports = "j1", "j2", "j3" , 
}

!---------- end of osiris input file -------------