!----------------- Input deck illustrating the Python-Fortran interface ------------------
! To run this input deck as is, first put the input deck, OSIRIS executable, and the
! py-script.py file all in the same directory.  Then execute `python py-script.py`, which
! will create the interp.npy data file.  Next, do `export PYTHONPATH=.` to set the Python
! path to the directory that contains the py-script.py file (current directory).  Finally,
! execute `./osiris-2D.e os-stdin-py-util` to run the simulation, which will use the
! py-script.py and interp.npy files to set various field and particle data.
!-----------------------------------------------------------------------------------------

!----------global simulation parameters----------
simulation 
{
  !algorithm = "tiles",
  !wall_clock_limit = "2:00:00",
  !wall_clock_check = 500,
  !file_format = "zdf",
  parallel_io = "mpi",
}

!--------the node configuration for this simulation--------
node_conf 
{
 node_number(1:2) = 4, 4,
 n_threads=2,
 if_periodic(1:2) = .false., .false.,
 !tile_number(1:2) = 128, 128,
 !tile_topology = "snake",
 !com_buf_size = 1024,
 !ihole_size_frac = 0.05,
 !nchunks_pad_frac = 0.05,
}


!----------spatial grid----------
grid
{
  nx_p(1:2) =  4000, 3800,
  coordinates = "cartesian",
  !load_balance(1:2) = .true., .true.,
  !lb_type = "dynamic",
  !n_dynamic = 200, ! estimate this to be once per crossing time
  ! cell_weight = 1.0,
  ! dump_global_load = 1,
  !start_load_balance = 100,
}

!----------time step and global data dump timestep number----------
time_step
{
  dt     =   0.07,
  ndump  =    1024,
}

!----------restart information----------
restart
{
  ndump_fac = -1,
  ndump_time = 3500, !once/hour
  if_restart = .false.,
  if_remold = .true.,
}

!----------spatial limits of the simulations----------
space
{
  xmin(1:2) =  -1000, 100,
  xmax(1:2) =  1000, 2000,
  if_move(1:2) = .false., .false.,
}

!----------time limits ----------
time
{
  tmin = 0.0,
  tmax  = 30000.0,
}

!----------field solver set up----------
el_mag_fld
{
  ! Set two of the field components with the Python script
  ! Note, you need to set PYTHONPATH in the console to the folder containing py-script.py
  type_init_b(1:3) = "python", "python", "python",
  type_init_e(1:3) = "python", "python", "python",
  init_py_mod = "py-script", ! Name of Python file
  init_py_func = "set_fld", ! Name of function in the Python file to call (same for all components)
  ! init_move_window = .false., ! May want to declare this for a moving-window simulation

  ! You can also do this with external fields, as functions of time
  ext_fld = "dynamic",
  type_ext_b(1:3) = "none", "none", "none",
  type_ext_e(1:3) = "none", "none", "none",
  ext_py_mod = "py-script", ! Name of Python file
  ext_py_func = "set_fld_ext", ! Name of function in the Python file to call (same for all components)
}

!----------boundary conditions for em-fields ----------
emf_bound
{
  type(1:2,1) =   "open", "open",
  type(1:2,2) =   "reflecting", "open",
}

!----------- electo-magnetic field diagnostics ---------
diag_emf
{
  reports = 
    "b1, savg",
    "b2, savg",
    "b3, savg",
    "e1, savg",
    "e2, savg",
    "e3, savg",
    
  !ndump_fac = 1,                     ! do full grid diagnostics at every 20 timesteps
  ndump_fac_ave = 1,                  ! do average/envelope grid diagnostics at every timestep
  ! ndump_fac_lineout = 1,              ! do lineouts/slices at every timestep
  ndump_fac_ene_int = 1,
  n_ave(1:2) = 4,4,                   ! average/envelope 8 cells (2x2x2)
  !n_tavg = 5,                         ! average 5 iterations for time averaged diagnostics 
}

!----------number of particle species----------
particles
{
  interpolation = "quadratic",
  num_species = 3,
}

!----------information for electrons----------
species
{
  name = "electron",
  
  !num_par_max = 18,
  rqm=-1.0,
  num_par_x(1:2) = 1, 1,
  init_type = "python",
}

!----------inital proper velocities - electron-----------------
udist
{
  use_spatial_uth = .true.,
  uth_py_mod = "py-script", ! Name of Python file
  uth_py_func = "set_uth_e", ! Name of function in the Python file to call
  
  ! use_spatial_ufl = .true.,
  ufl_py_mod = "py-script", ! Name of Python file
  ufl_py_func = "set_ufl", ! Name of function in the Python file to call
}

!----------density profile for electrons----------
profile
{
  py_mod = "py-script", ! Name of Python file
  py_func = "set_density_e", ! Name of function in the Python file to call
}

!----------boundary conditions for electrons----------
spe_bound
{
  type(1:2,1) =   "thermal","thermal",
  type(1:2,2) =   "thermal","thermal",
  uth_bnd(1:3,1,1)= 0.0088, 0.0088, 0.0088,
  uth_bnd(1:3,1,2)= 0.0088, 0.0088, 0.0088,
  uth_bnd(1:3,2,1)= 0.0088, 0.0088, 0.0088,
  uth_bnd(1:3,2,2)= 0.0088, 0.0088, 0.0088,
  thermal_type(1:2,1) = "half max", "half max",
  thermal_type(1:2,2) = "half max", "half max",
}

!----------diagnostic for electrons----------
diag_species
{
  ndump_fac = 1,
  ndump_fac_temp = 2,
  ndump_fac_ene = 2,
  reports = "charge",
  rep_udist = "uth1", "uth2", "ufl1", "ufl2",
  ndump_fac_pha = 1,
  ps_pmin(1:3) = -0.02, -0.05, -0.02,
  ps_pmax(1:3) = 0.02,  0.05,  0.02,
  ps_xmin(1:2) = -250.0, 100.0,
  ps_xmax(1:2) = 250.0, 2000.0, ! Make sure to adjust this to the upper x bound
  ps_np(1:2) = 2048, 2048,
  ps_nx(1:2) = 1024, 1024,
  !if_ps_p_auto(1:3) = .true., .true., .true.,
  phasespaces = "p1x2", "p2x2","p3x2",
}

!----------information for Aluminum ions----------
species
{
  name = "Aluminum",
  !num_par_max = 18,
  rqm=100.0,
  num_par_x(1:2) = 1, 1,
  init_type = "python",
}

!----------inital proper velocities - Aluminum-----------------
udist
{
  use_spatial_uth = .true.,
  uth_py_mod = "py-script", ! Name of Python file
  uth_py_func = "set_uth_al", ! Name of function in the Python file to call
  
  ! use_spatial_ufl = .true.,
  ufl_py_mod = "py-script", ! Name of Python file
  ufl_py_func = "set_ufl", ! Name of function in the Python file to call
}

!----------density profile for Aluminum----------
profile
{
  py_mod = "py-script", ! Name of Python file
  py_func = "set_density_Al", ! Name of function in the Python file to call
}

!----------boundary conditions for Aluminum----------
spe_bound
{
  type(1:2,1) =   "thermal","thermal",
  type(1:2,2) =   "thermal","thermal",
  uth_bnd(1:3,1,1)= 1.7694e-03,1.7694e-03,1.7694e-03,
  uth_bnd(1:3,1,2)= 1.7694e-03,1.7694e-03,1.7694e-03,
  uth_bnd(1:3,2,1)= 1.7694e-03,1.7694e-03,1.7694e-03,
  uth_bnd(1:3,2,2)= 1.7694e-03,1.7694e-03,1.7694e-03, ! 40 eV background temp
  thermal_type(1:2,2) = "half max", "half max",
  thermal_type(1:2,1) = "half max", "half max",
}

!----------diagnostic for Aluminum----------
diag_species
{
  ndump_fac = 1,
  ndump_fac_temp = 2,
  ndump_fac_ene = 2,
  reports = "charge",
  rep_udist = "uth1", "uth2", "ufl1", "ufl2",
  ndump_fac_pha = 1,
  ps_pmin(1:3) = -0.02, -0.05, -0.02,
  ps_pmax(1:3) = 0.02,  0.05,  0.02,
  ps_xmin(1:2) = -250.0, 100.0,
  ps_xmax(1:2) = 250.0, 2000.0, ! Make sure to adjust this to the upper x bound
  ps_np(1:2) = 2048, 2048,
  ps_nx(1:2) = 1024, 1024,
  !if_ps_p_auto(1:3) = .true., .true., .true.,
  phasespaces = "p1x2", "p2x2","p3x2",
}

!----------information for Magnesium----------
species
{
  name = "Magnesium",
  !num_par_max = 18,
  rqm=97.9,
  num_par_x(1:2) = 1, 1,
  init_type = "python",
}

!----------inital proper velocities - Magnesium-----------------
udist
{
  use_spatial_uth = .true.,
  uth_py_mod = "py-script", ! Name of Python file
  uth_py_func = "set_uth_mg", ! Name of function in the Python file to call
  
  ! use_spatial_ufl = .true.,
  ufl_py_mod = "py-script", ! Name of Python file
  ufl_py_func = "set_ufl", ! Name of function in the Python file to call
}

!----------density profile for Magnesium----------
profile
{
  py_mod = "py-script", ! Name of Python file
  py_func = "set_density_Mg", ! Name of function in the Python file to call
}

!----------boundary conditions for Magnesium----------
spe_bound
{
  type(1:2,1) =   "thermal","thermal",
  type(1:2,2) =   "thermal","thermal",
  uth_bnd(1:3,1,1)= 1.7694e-03,1.7694e-03,1.7694e-03,
  uth_bnd(1:3,1,2)= 1.7694e-03,1.7694e-03,1.7694e-03,
  uth_bnd(1:3,2,1)= 1.7694e-03,1.7694e-03,1.7694e-03,
  uth_bnd(1:3,2,2)= 1.7694e-03,1.7694e-03,1.7694e-03, ! 40 eV background temp
  thermal_type(1:2,2) = "half max", "half max",
  thermal_type(1:2,1) = "half max", "half max",
}

!----------diagnostic for this Magnesium----------
diag_species
{
  ndump_fac = 1,
  ndump_fac_temp = 2,
  ndump_fac_ene = 2,
  reports = "charge",
  rep_udist = "uth1", "uth2", "ufl1", "ufl2",
  ndump_fac_pha = 1,
  ps_pmin(1:3) = -0.02, -0.05, -0.02,
  ps_pmax(1:3) = 0.02,  0.05,  0.02,
  ps_xmin(1:2) = -250.0, 100.0,
  ps_xmax(1:2) = 250.0, 2000.0, ! Make sure to adjust this to the upper x bound
  ps_np(1:2) = 2048, 2048,
  ps_nx(1:2) = 1024, 1024,
  !if_ps_p_auto(1:3) = .true., .true., .true.,
  phasespaces = "p1x2", "p2x2","p3x2",
}

!----------smoothing for currents----------

smooth 
{
  !order(1:2) = 3,
  type(1:2) = "5pass",
}


!----------diagnostic for currents----------
  diag_current
{
  !ndump_fac = 1,
  !reports = "j1", "j2", "j3" , 

}

!---------- end of osiris input file -------------